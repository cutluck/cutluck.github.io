---
layout: post
title:  "angr"
date:   2023-04-03 12:03:49 -0700
categories: note tool util
---

==============================================================================
[angr](https://docs.angr.io/)
==============================================================================

- Core concepts
	- Create project
		Load binary
	- project.loader
		- shared_objects
		- min_addr
		- max_addr
		- main_object
			- execstack
				executable stack ?
			- pic
				position independent ?
	- project.factory
		provide object we need
		- Block
			- block(addr)
		- State
			SimState
			- entry_state()
			- regs
				value as bitvector
			- mem[index]
				- .<type>
					cpp type
				- store value
					bitvector | python value
				- .resolved
					get as bitvector
				- .concrete
					get as python value
			- bitvector value as symbolic
		- Simulation Manager
			- simulatio_manager(state) simgr
				- simgr.active
					initialized state
				- simgr.step()
					simulate a basic block symbolic execution
				
- Loader
	- CLE (CLE Load Everything)
	- project.loader
		- all_objects
		- main_object
		- shared_objects
		- all_elf_objects
		- extern_object
			unresolved import
		- kernel_object
			emulated syscall
		- find_object_containing(addr)
		- find_symbol(name)
	- object
		- entry
			entry point
		- min_addr
		- max_addr
		- segments
		- sections
		- find_segment_containing(addr)
		- find_section_containing(addr)
		- plt[symbol] == addr
		- reverse_plt[add] == symbol
		- linked_base
		- mapped_base
	- Loading Options
	- Hooking
		- project.hook(addr, func)
		- project.hook_symbol(symbol, hook)
		
- Solver
	- state.solver
		- BVV (BitVector Value)
		- BVS (BitVector Symbol)
	- solver.add()
	- solver.eval()
	
- State SimState
	project.factory.
	- entry_state()
	- blank_state()
	- full_init_state()
	- call_state(addr, ...args)
	- state.mem[]
	- state.memory
		- load(addr, size)
		- store(addr, value)
	- state.regs
	- state.registers
	- state.globals
		python dict
	- state.history
		- parent
		- descriptions
		- bbl_addrs
		- jumpkinds
		- jump_guards
		- events
		- actions
			angr.options.refs
	- state.callstack
		- func_addr
		- call_site_addr
		- stack_ptr
		- ret_addr
		
- Simulation Manager
	- project.simgr(state)
	- step()
	- run()
	- move()
		- from_stash
		- to_stash
		- filter_func
	- stash
		- active
		- deadended
		- pruned
		- unconstrained
			save_unconstrained
		- unsat
			save_unsat
		- errored
			ErrorRecord
	- explore()
		- find
			- found
		- avoid
			- avoided
		- num_find
		- use_technique(tech)
			angr.exploration_techniques
			
- Execution SimEngine
	series of engines
	| failure engine
	| syscall engine
	| hook engine
	| unicorn engine
	| VEX engine
	- SimSuccessors
		- project.factory.successors(state, ...args)
		| successors
		| unsat_successors
		| flat_successors
		| unconstrained_successors
		| all_successors
	- Breakpoint
		- state.inspect.b()
		
- SimProcedures



- [angr strategies](https://github.com/bordig-f/angr-strategies)

- [CHEATSHEET.md](https://github.com/angr/angr-doc/blob/master/CHEATSHEET.md)